// run-schema-repair.mjs
// Script Node.js pour ex√©cuter les r√©parations de sch√©ma dans Supabase

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// R√©cup√©rer le r√©pertoire actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Charger les variables d'environnement depuis les arguments ou utiliser les valeurs par d√©faut
const SUPABASE_URL = process.env.SUPABASE_URL || process.argv[2];
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY || process.argv[3];

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('\x1b[31m%s\x1b[0m', 'Erreur: URL Supabase et cl√© de service requises.');
  console.log('\x1b[33m%s\x1b[0m', 'Usage: node run-schema-repair.mjs <SUPABASE_URL> <SUPABASE_SERVICE_KEY>');
  console.log('Ou d√©finissez les variables d\'environnement SUPABASE_URL et SUPABASE_SERVICE_KEY');
  process.exit(1);
}

// Initialiser le client Supabase avec la cl√© de service
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// Chemin vers le script SQL de r√©paration
const repairScriptPath = path.join(__dirname, '..', 'database', 'REPAIR_MESSAGES_TABLE.sql');
const verifyScriptPath = path.join(__dirname, '..', 'database', 'VERIFY_AND_FIX_SCHEMA.sql');

async function runRepairScript() {
  try {
    console.log('\x1b[36m%s\x1b[0m', 'üîß D√©but de la r√©paration du sch√©ma de la base de donn√©es...');
    
    // Lire le contenu des scripts SQL
    const repairScript = fs.readFileSync(repairScriptPath, 'utf8');
    
    // Ex√©cuter la r√©paration rapide de la table messages
    console.log('\x1b[36m%s\x1b[0m', '‚öôÔ∏è Ex√©cution du script de r√©paration de la table messages...');
    const { error: repairError } = await supabase.rpc('exec_sql', { sql: repairScript });
    
    if (repairError) {
      console.error('\x1b[31m%s\x1b[0m', '‚ùå Erreur lors de la r√©paration rapide:', repairError.message);
    } else {
      console.log('\x1b[32m%s\x1b[0m', '‚úÖ Script de r√©paration rapide ex√©cut√© avec succ√®s.');
    }
    
    // Ex√©cuter le script de v√©rification et r√©paration compl√®te
    console.log('\x1b[36m%s\x1b[0m', '‚öôÔ∏è Ex√©cution du script de v√©rification compl√®te du sch√©ma...');
    const verifyScript = fs.readFileSync(verifyScriptPath, 'utf8');
    const { error: verifyError } = await supabase.rpc('exec_sql', { sql: verifyScript });
    
    if (verifyError) {
      console.error('\x1b[31m%s\x1b[0m', '‚ùå Erreur lors de la v√©rification compl√®te:', verifyError.message);
    } else {
      console.log('\x1b[32m%s\x1b[0m', '‚úÖ Script de v√©rification et r√©paration compl√®te ex√©cut√© avec succ√®s.');
    }

    // V√©rifier que la table messages existe maintenant
    const { data: tables, error: tablesError } = await supabase
      .from('pg_tables')
      .select('tablename')
      .eq('schemaname', 'public')
      .eq('tablename', 'messages');
    
    if (tablesError) {
      console.error('\x1b[31m%s\x1b[0m', '‚ùå Erreur lors de la v√©rification des tables:', tablesError.message);
    } else if (!tables || tables.length === 0) {
      console.error('\x1b[31m%s\x1b[0m', '‚ö†Ô∏è La table messages n\'existe toujours pas apr√®s r√©paration!');
    } else {
      console.log('\x1b[32m%s\x1b[0m', '‚úÖ Table messages v√©rifi√©e avec succ√®s.');
    }

    console.log('\x1b[36m%s\x1b[0m', 'üéâ Processus de r√©paration termin√©.');
    
  } catch (error) {
    console.error('\x1b[31m%s\x1b[0m', '‚ùå Erreur inattendue:', error.message);
    process.exit(1);
  }
}

runRepairScript();
