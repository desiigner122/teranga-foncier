-- =================================================================
-- DIAGNOSTIC DE LA BASE DE DONN√âES SUPABASE
-- =================================================================
-- üîç Ce script v√©rifie l'√©tat actuel de votre base de donn√©es
-- üìÖ Date : 20 Ao√ªt 2025
-- ‚è±Ô∏è Temps estim√© : 1-2 minutes

-- =================================================================
-- üîç V√âRIFICATION 1 : TABLES EXISTANTES
-- =================================================================
SELECT 
  'üîç TABLES EXISTANTES' as section,
  string_agg(tablename, ', ' ORDER BY tablename) as tables_found
FROM pg_tables 
WHERE schemaname = 'public'
AND tablename IN ('profiles', 'parcels', 'parcel_submissions', 'transactions', 'notifications', 'fraud_alerts', 'institutions', 'regions', 'departments', 'communes', 'roles', 'conversations', 'messages');

-- =================================================================
-- üîç V√âRIFICATION 2 : COLONNES DE LA TABLE PARCELS
-- =================================================================
SELECT 
  'üîç COLONNES TABLE PARCELS' as section,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'parcels')
    THEN (
      SELECT string_agg(column_name, ', ' ORDER BY ordinal_position)
      FROM information_schema.columns 
      WHERE table_name = 'parcels' AND table_schema = 'public'
    )
    ELSE 'TABLE PARCELS N''EXISTE PAS'
  END as columns_found;

-- =================================================================
-- üîç V√âRIFICATION 3 : EXTENSIONS INSTALL√âES
-- =================================================================
SELECT 
  'üîç EXTENSIONS' as section,
  string_agg(extname, ', ' ORDER BY extname) as extensions_installed
FROM pg_extension;

-- =================================================================
-- üîç V√âRIFICATION 4 : SCH√âMAS DISPONIBLES
-- =================================================================
SELECT 
  'üîç SCH√âMAS' as section,
  string_agg(schema_name, ', ' ORDER BY schema_name) as schemas_found
FROM information_schema.schemata
WHERE schema_name IN ('public', 'auth', 'storage', 'realtime');

-- =================================================================
-- üîç V√âRIFICATION 5 : FONCTIONS RPC EXISTANTES
-- =================================================================
SELECT 
  'üîç FONCTIONS RPC' as section,
  CASE 
    WHEN COUNT(*) = 0 THEN 'AUCUNE FONCTION TROUV√âE'
    ELSE string_agg(routine_name, ', ' ORDER BY routine_name)
  END as functions_found
FROM information_schema.routines 
WHERE routine_schema = 'public'
AND routine_name LIKE '%dashboard%';

-- =================================================================
-- üîç V√âRIFICATION 6 : NOMBRE D'ENREGISTREMENTS
-- =================================================================
SELECT 
  'üîç DONN√âES' as section,
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'profiles')
    THEN 'profiles: ' || (SELECT COUNT(*) FROM profiles)
    ELSE 'profiles: TABLE N''EXISTE PAS'
  END ||
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'parcels')
    THEN ', parcels: ' || (SELECT COUNT(*) FROM parcels)
    ELSE ', parcels: TABLE N''EXISTE PAS'
  END ||
  CASE 
    WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'roles')
    THEN ', roles: ' || (SELECT COUNT(*) FROM roles)
    ELSE ', roles: TABLE N''EXISTE PAS'
  END as data_counts;

-- =================================================================
-- üîç V√âRIFICATION 7 : POLITIQUES RLS
-- =================================================================
SELECT 
  'üîç POLITIQUES RLS' as section,
  CASE 
    WHEN COUNT(*) = 0 THEN 'AUCUNE POLITIQUE RLS TROUV√âE'
    ELSE 'Politiques: ' || COUNT(*) || ' trouv√©es sur tables: ' || string_agg(DISTINCT tablename, ', ')
  END as rls_status
FROM pg_policies
WHERE schemaname = 'public';

-- =================================================================
-- üéØ DIAGNOSTIC FINAL ET RECOMMANDATIONS
-- =================================================================
SELECT 
  'üéØ DIAGNOSTIC FINAL' as section,
  CASE 
    WHEN NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'profiles')
    THEN '‚ùå CRITIQUE : Table profiles manquante. Ex√©cuter 01_MIGRATION_CRITIQUE_COMBINEE.sql'
    
    WHEN NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'parcels')
    THEN '‚ùå CRITIQUE : Table parcels manquante. Ex√©cuter 01_MIGRATION_CRITIQUE_COMBINEE.sql'
    
    WHEN NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'parcels' AND column_name = 'region')
    THEN '‚ùå ERREUR : Colonne region manquante dans parcels. Re-ex√©cuter 01_MIGRATION_CRITIQUE_COMBINEE.sql'
    
    WHEN NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_admin_dashboard_metrics')
    THEN '‚ö†Ô∏è ATTENTION : Fonctions RPC manquantes. Ex√©cuter 02_MIGRATION_RPC_FUNCTIONS_SECURISEE.sql'
    
    ELSE '‚úÖ BASE DE DONN√âES SEMBLE CORRECTE'
  END as status_and_recommendation;

-- =================================================================
-- üìã PROCHAINES √âTAPES RECOMMAND√âES
-- =================================================================
SELECT 
  'üìã PROCHAINES √âTAPES' as section,
  CASE 
    WHEN NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'profiles')
    THEN '1Ô∏è‚É£ Ex√©cuter database/01_MIGRATION_CRITIQUE_COMBINEE.sql\n2Ô∏è‚É£ Puis ex√©cuter database/02_MIGRATION_RPC_FUNCTIONS_SECURISEE.sql'
    
    WHEN NOT EXISTS (SELECT 1 FROM information_schema.routines WHERE routine_name = 'get_admin_dashboard_metrics')
    THEN '‚úÖ Tables OK - Ex√©cuter database/02_MIGRATION_RPC_FUNCTIONS_SECURISEE.sql'
    
    ELSE 'üéâ MIGRATION COMPL√àTE - Tester l''application'
  END as next_steps;

-- Message final
SELECT 
  'üîç DIAGNOSTIC TERMIN√â' as final_message,
  NOW() as checked_at;
