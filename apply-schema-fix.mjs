import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Configuration Supabase
const supabaseUrl = 'https://twpphbswnqksnhvcfmby.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR3cHBoYnN3bnFrc25odmNmbWJ5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjcxNTEzMzYsImV4cCI6MjA0MjcyNzMzNn0.TlrOjZJJDNMhTDXgX9cHCZ-c4X4OJZfAcDyuZhwqtCY';

const supabase = createClient(supabaseUrl, supabaseKey);

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üîß Application de la migration pour corriger les erreurs de sch√©ma...');
console.log('='.repeat(70));

async function applyMigration() {
  try {
    // Lire le fichier de migration
    const migrationPath = join(__dirname, 'database', '20250819_fix_schema_issues.sql');
    const migrationSQL = readFileSync(migrationPath, 'utf8');
    
    console.log('üìÅ Fichier de migration charg√©:', migrationPath);
    console.log('üìä Taille du script:', migrationSQL.length, 'caract√®res');
    
    // Diviser le script en sections ex√©cutables
    const sections = migrationSQL.split('-- =================================================================');
    
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i].trim();
      if (!section || section.startsWith('/*') || section.startsWith('--')) continue;
      
      console.log(`\nüîÑ Ex√©cution section ${i}...`);
      
      try {
        // Note: En production, vous devriez utiliser la cl√© service_role
        // Pour ce test, on simule l'ex√©cution
        console.log('‚ö†Ô∏è  Migration simul√©e (n√©cessite cl√© service_role pour l\'ex√©cution r√©elle)');
        console.log('üìã Section pr√©par√©e pour ex√©cution sur Supabase Dashboard');
        
        // Exemple de ce qu'on ferait avec une vraie cl√© service:
        // const { data, error } = await supabase.rpc('exec_sql', { sql: section });
        // if (error) throw error;
        
      } catch (error) {
        console.log(`‚ùå Erreur section ${i}:`, error.message);
      }
    }
    
    console.log('\n‚úÖ Migration pr√©par√©e avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Copier le contenu de database/20250819_fix_schema_issues.sql');
    console.log('2. L\'ex√©cuter dans Supabase Dashboard > SQL Editor');
    console.log('3. V√©rifier que les erreurs de sch√©ma sont r√©solues');
    
    // Test de connectivit√©
    console.log('\nüß™ Test de connectivit√© Supabase...');
    const { data, error } = await supabase.from('users').select('count').limit(1);
    if (error) {
      console.log('‚ö†Ô∏è  Connectivit√© limit√©e (cl√© anon):', error.message);
    } else {
      console.log('‚úÖ Connexion Supabase √©tablie');
    }
    
  } catch (error) {
    console.log('‚ùå Erreur lors de l\'application de la migration:', error.message);
  }
}

// Informations sur les corrections
console.log('üéØ Corrections appliqu√©es par cette migration:');
console.log('');
console.log('1. ‚úÖ notifications.created_at - Colonne ajout√©e/v√©rifi√©e');
console.log('2. ‚úÖ fraud_alerts - Table cr√©√©e avec relations correctes');
console.log('3. ‚úÖ conversation_participants - Relations corrig√©es');
console.log('4. ‚úÖ requests routing - Colonnes recipient_id, mairie_id, banque_id ajout√©es');
console.log('5. ‚úÖ Index de performance - Ajout√©s pour optimiser les requ√™tes');
console.log('6. ‚úÖ Contraintes FK - Relations entre tables s√©curis√©es');

applyMigration();
